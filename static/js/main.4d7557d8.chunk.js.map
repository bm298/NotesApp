{"version":3,"sources":["logo.svg","notesApp/SideTasksCompleted.js","notesApp/sidebarNotes.js","notesApp/SideDeleteNotes.js","notesApp/mainNotes.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Tasks","props","i","notes","length","status","newNotes","total","react_default","a","createElement","className","AddNote","type","placeholder","name","onChange","handleChange","value","addTitle","addText","onClick","submitForm","close","SideDeleteNotes","go_index_esm","openYesBtn","closeNoBtn","_React$useState","React","useState","_React$useState2","Object","slicedToArray","isChecked","setisChecked","useEffect","sorted","sorted1","setSorted","setSorted1","_React$useState3","id","_React$useState4","setNotes","_React$useState5","_React$useState6","formData","setFormData","event","_event$target","target","checked","prevFormData","objectSpread","defineProperty","tempNotes","map","note","_React$useState7","_React$useState8","isShown","setIsShown","_React$useState9","_React$useState10","deleteBtn","setDeleteBtn","toggleShown","prevShown","editNotes","currentNoteId","_React$useState11","_React$useState12","notesToDelete","setNotesToDelete","_React$useState13","_React$useState14","_React$useState15","_React$useState16","console","log","cellPadding","idAllClick","newNotesToDelete","push","idallUnclick","selectAllId","ti_index_esm","prevSorted","sumDesc","sort","b","prevSorted1","sumAsc","eachNote","noteId","toDeleteArray","position","findIndex","splice","handleCheckBoxChange","index_esm","preventDefault","newFormData","newFormDatas","concat","toConsumableArray","newNotesArray","slice","filter","includes","App","mainNotes_AddNote","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4d7557d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from \"react\";\r\n\r\n\r\nexport default function Tasks(props){\r\n\r\n// if (props.notes.status===\"completed\"){\r\n// let completed= \r\n// }\r\n\r\nfor (let i=0; i<props.notes.length; i++){\r\n    if (props.notes[i].status===\"completed\"){\r\n        //console.log(\"found completed\")\r\n    }\r\n    else if (props.notes[i].status===\"not completed\"){\r\n        //console.log(\"found not completed\")\r\n    }\r\n    else{\r\n        //console.log(\"found new\")\r\n    }\r\n}\r\n\r\nlet completed= 1\r\nlet notCompleted= 2\r\nlet newNotes= props.notes.length-completed-notCompleted \r\nlet total= newNotes+notCompleted+completed\r\n\r\n    return (\r\n        <div className=\"tasks\">\r\n            <div className=\"tasks2\">\r\n                <div className=\"tasksTotal\">\r\n                <h4>Total</h4>\r\n                <h2>{total}</h2>\r\n                </div>\r\n                <div className=\"newNotes\">\r\n                <h4>New Notes</h4>\r\n                <h2>{newNotes}</h2>\r\n                </div>\r\n                <div className=\"tasksCompleted\">\r\n                <h4>Completed</h4>\r\n                <h2>{completed}</h2>\r\n                </div>\r\n                <div className=\"tasksNotCompleted\">\r\n                <h4>Not Completed</h4>\r\n                <h2>{notCompleted}</h2>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AddNote(props){\r\n    // const noteElements = props.notes.map((note, index) => (\r\n\r\n    return(\r\n    <div className=\"spanAddNote\">\r\n        <form className=\"spanForm\">\r\n            <div><h2 className=\"addNoteH2\">Add New Note</h2></div>\r\n            <div className=\"Inputs\"> \r\n                <input className=\"titleInput\" \r\n                    type=\"text\"\r\n                    placeholder='Add Title'\r\n                    name=\"addTitle\"\r\n                    onChange={props.handleChange}\r\n                    value={props.addTitle}\r\n                /> \r\n            </div>\r\n            <div className=\"Inputs\">\r\n                <textarea className=\"textInput\" \r\n                    placeholder=\"Type Note\"\r\n                    name=\"addText\"\r\n                    onChange={props.handleChange}\r\n                    value={props.addText}\r\n                />\r\n            </div>\r\n            {/* {(props.addTitle.length<2 && props.addText.length<2) && <p>Must Complete Both Boxes</p>}\r\n            {props.addTitle.length<1 && props.addText.length<1 && \"\"} */}\r\n            <div>\r\n                <button type=\"submit\" className=\"saveBtn\" onClick={props.submitForm}>Save</button>\r\n                <button className=\"cancelBtn\" onClick={props.close}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {GoAlert} from 'react-icons/go';\r\n\r\n\r\nexport default function SideDeleteNotes(props){\r\n    // console.log(props.formData.id)\r\n    return(\r\n        <div className=\"deleteBox\">\r\n            <GoAlert className=\"goAlert\"/>\r\n            <p>Do you want to delete this note?</p>\r\n            <div className=\"deleteBtns\">\r\n                <button className=\"yesBtn\" onClick={props.openYesBtn}>Yes</button>\r\n                <button className=\"noBtn\" onClick={props.closeNoBtn}>No</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './mainNotesCss.css';\r\nimport { FaLeaf, FaTrashAlt} from 'react-icons/fa';\r\nimport {AiFillEdit,AiOutlineArrowDown,AiOutlineArrowUp} from 'react-icons/ai';\r\nimport {TiArrowSortedDown,TiArrowSortedUp} from 'react-icons/ti'\r\nimport SideTasksCompleted from \"./SideTasksCompleted\";\r\nimport SidebarNotesEl from \"./sidebarNotes\";\r\nimport SideDeleteNotes from \"./SideDeleteNotes\";\r\n\r\n\r\n\r\n\r\nexport default function AddNote(){\r\n    const [isChecked, setisChecked]= React.useState(false)\r\n\r\n        React.useEffect(() => {\r\n        if (notes.length===0 && !sorted){\r\n            setSorted1(false)\r\n        }\r\n        else if (notes.length===0 && !sorted1){\r\n            setSorted(false)\r\n        }\r\n\r\n           });        \r\n    \r\n    //React.useEffect(() => {\r\n        // notes.map over arrray to display on every render\r\n\r\n    const [notes, setNotes] = React.useState([\r\n{\r\n    id: 1,\r\n    addTitle: \"Rearrange Wardrobe\" ,\r\n    addText: \"Wake up at 9am and start sorting clothes\",\r\n    status: \"Completed\",\r\n    isChecked: isChecked\r\n}, {\r\n    id: 2,\r\n    addTitle: \"Gym\" ,\r\n    addText: \"Hit the gym after work\",\r\n    status: \"Not Completed\",\r\n    isChecked: isChecked\r\n},{\r\n    id: 3,\r\n    addTitle: \"Emails\" ,\r\n    addText: \"Read through daily emails\",\r\n    status: \"Not Completed\",\r\n    isChecked: isChecked\r\n},{\r\n    id: 4,\r\n    addTitle: \"Skin Care\" ,\r\n    addText: \"Start new skin care routine\",\r\n    status: \"New Notes\",\r\n    isChecked: isChecked\r\n},{\r\n    id: 5,\r\n    addTitle: \"Meditate\" ,\r\n    addText: \"Start meditating before going to sleep\",\r\n    status: \"New Notes\",\r\n    isChecked: isChecked\r\n}\r\n]\r\n)\r\n\r\n\r\n    const [formData, setFormData] = React.useState(\r\n        {id: notes.length+1, addTitle: \"\", addText: \"\",status:\"\"}\r\n    )\r\n\r\n    function handleChange(event, id) {\r\n        const {name, value, type, checked} = event.target\r\n        setFormData(prevFormData => {\r\n            return {\r\n                ...prevFormData,\r\n                [name]: type === \"checkbox\" ? checked : value\r\n            }\r\n        })\r\n\r\n        let tempNotes= notes.map((note) => \r\n        note.id===id ? {...note, isChecked:checked} : note\r\n        )\r\n\r\n        setNotes(tempNotes)\r\n    }\r\n\r\n\r\n    function submitForm(event){\r\n        event.preventDefault()\r\n\r\n        const newFormData= {\r\n            id: notes.length+1,\r\n            addTitle: formData.addTitle,\r\n            addText: formData.addText,\r\n            status: \"New Notes\",\r\n        }\r\n\r\n        const newFormDatas= [...notes, newFormData]\r\n        setNotes(newFormDatas)\r\n        toggleShown()\r\n        setFormData({id: notes.length+1, addTitle: \"\", addText: \"\"})\r\n    \r\n        if (notes.length=1){\r\n            setSorted1(true)\r\n        }\r\n        else {}\r\n    }\r\n\r\n    const [isShown, setIsShown] = React.useState(false)\r\n    const [deleteBtn, setDeleteBtn]= React.useState(false)\r\n\r\n    function toggleShown(){\r\n        setIsShown(prevShown => !prevShown)\r\n    }\r\n\r\n    function editNotes(currentNoteId){\r\n        setIsShown(true)\r\n        // setFormData(oldNotes=>{\r\n        //     for (let i=0; i<oldNotes.length; i++){\r\n        //         if (currentNoteId===oldNotes[i].id){\r\n        //             return ({...oldNotes[i], addTitle:\"nearly there...\"})\r\n        //         }\r\n        //         else {console.log(\"hello\")}\r\n        //     }\r\n        // })\r\n    }\r\n\r\n\r\n    function closeSideBarNotes(){\r\n        setIsShown(false)\r\n    }\r\n\r\n    const [notesToDelete, setNotesToDelete] =React.useState([]);\r\n    function handleCheckBoxChange(event, noteId){\r\n\r\n        let toDeleteArray= notesToDelete\r\n        if (event.target.checked) {\r\n            setDeleteBtn(true)\r\n            toDeleteArray.push(noteId)\r\n            }\r\n            else {\r\n                let position= toDeleteArray.findIndex((note)=> note===noteId)\r\n                toDeleteArray.splice(position,1)\r\n                console.log(position)\r\n            }\r\n\r\n        if (notesToDelete.length<1){\r\n            setDeleteBtn(false)\r\n        }\r\n            setNotesToDelete(toDeleteArray)\r\n            //console.log(toDeleteArray)\r\n    }\r\n\r\n    function handleChangeDeleteBtnNo(){\r\n        let idallUnclick= []\r\n        for ( let i=0;i<notes.length; i++){\r\n            let total= {...notes[i], isChecked:false} \r\n            idallUnclick.push(total)\r\n            setDeleteBtn(false)\r\n           \r\n        }\r\n        setNotes(idallUnclick)\r\n        setisChecked(false)\r\n    }\r\n\r\n    \r\n    function handleChangeDeleteBtnYes(){\r\n        setisChecked(false)\r\n         let newNotesArray=notes.slice()\r\n        newNotesArray=newNotesArray.filter((note) =>{\r\n            if (!notesToDelete.includes(note.id)){\r\n                return true\r\n            }            \r\n        }\r\n    )\r\n    setNotes(newNotesArray)\r\n    setDeleteBtn(false)\r\n    setNotesToDelete([])   \r\n    }\r\n    \r\n    function selectAllId(event){\r\n        \r\n        if (event.target.checked){\r\n            setisChecked(true)\r\n        let idAllClick= []\r\n        let newNotesToDelete=[]\r\n    for ( let i=0;i<notes.length; i++){\r\n        newNotesToDelete.push(notes[i].id)\r\n        console.log(newNotesToDelete)\r\n        let total= {...notes[i], isChecked:true } \r\n        idAllClick.push(total)\r\n        setDeleteBtn(true)\r\n    }\r\n    setNotes(idAllClick)\r\n    setNotesToDelete(newNotesToDelete)\r\n    }\r\n\r\n    else{\r\n        setisChecked(false)\r\n        setNotesToDelete([])\r\n        let idallUnclick= []\r\n    for ( let i=0;i<notes.length; i++){\r\n        let total= {...notes[i], isChecked:false } \r\n        idallUnclick.push(total)\r\n        setDeleteBtn(false)\r\n    }\r\n    setNotes(idallUnclick)\r\n    }\r\n\r\n}\r\n\r\n\r\n        // console.log(notes.includes(notesToDelete))\r\n        // for (let i=0; i<notes.length;i++){\r\n        //     // let holdDelete=finalDelete\r\n        //     let allHeld= notes[i].id\r\n        //     for (let i=0; i<notesToDelete.length;i++){\r\n        //          console.log(notesToDelete[i],allHeld)\r\n        //          console.log(notesToDelete[i]===allHeld)\r\n        //          notesToDelete.includes(note.id)\r\n        //         // if (notesToDelete[i]!==allHeld){\r\n        //         //     holdDelete.push(\"all the numbers that dont match\")\r\n        //         //     setNotes(holdDelete)\r\n\r\n        //         // setNotes(oldNotes => oldNotes.filter(allHeld!==notesToDelete))\r\n\r\n                    //console.log(allHeld)\r\n                    // console.log(notesToDelete[i],allHeld)\r\n                    // console.log(notesToDelete[i]!==allHeld)\r\n\r\n\r\n                  //  console.log(holDelete.splice(i,1))\r\n\r\n                    // let positionInNotes=notes.findIndex((note)=>console.log(note.id!==notesToDelete))\r\n                    // console.log(positionInNotes)\r\n                    // console.log(allHeld)\r\n                    // console.log(allHeld[i])\r\n                    // console.log(notes[allHeld-1])\r\n                    // holdDelete.push(notes[allHeld-1])\r\n                \r\n            \r\n            // setNotes(oldNotes => oldNotes.filter(allHeld!==notesToDelete[i]||\"undefined\"))\r\n            // }\r\n        // let result= notes.filter(notes[i].id !== notesToDelete)\r\n        // console.log(result)\r\n        // setNotes(oldNotes => oldNotes.filter(notes[i].id !== notesToDelete[i]))\r\n        // }\r\n\r\n        // let holdDelete=finalDelete\r\n        //  //   let allHeld= notes[i].id\r\n        //     for (let p=0; p<notesToDelete.length;p++){\r\n        //         // console.log(notes[i].id, notes[p].id)\r\n        //        console.log(notes[p].id)\r\n        //         if (notes[i].id!==notesToDelete[p]){\r\n        //         //   console.log(notes[i].id!==notesToDelete[p])\r\n                    \r\n        //         //    holdDelete.push(...allHeld)\r\n        //         }\r\n        // setNotes(oldNotes => oldNotes.filter(notes[i].id !== notesToDelete))\r\n        // const toDeleteArray=[]\r\n        // for (let i=0; i<notes.length;i++){\r\n        //     if (notes[i].id===textId){\r\n        //         toDeleteArray.unshift(...notes)\r\n        //         console.log(...notes)\r\n        //     }\r\n        //     else{\r\n        //         toDeleteArray.push(\"\")\r\n        //     }\r\n        // }\r\n        // // setNotes(toDeleteArray)\r\n\r\n    \r\n\r\n        // const position= notes.findIndex((text) => {\r\n        //     if (text.id === textId){\r\n        //         toDeleteArray.push(textId)\r\n        //         return textId===text.id\r\n        //     }\r\n        //     else {console.log(\"ids aint matching bra \")}\r\n        //     })\r\n        //     console.log(position)\r\n        //     console.log(toDeleteArray)\r\n      \r\n        // const numbers= [55,32,54,23,75,3,6,7,4]\r\n        // React.useEffect(() => {\r\n        //     setNotes(sorted)\r\n        //     }, [sorted]);\r\n\r\n        const [sorted, setSorted]= React.useState(false)\r\n        function sortAsc(){\r\n            if (notes.length>0){\r\n                setSorted1(prevSorted1 => !prevSorted1)\r\n                let sumAsc=notes.sort(function compareFunc(a,b){\r\n                    return b.id- a.id\r\n                 }\r\n            )\r\n            console.log(sumAsc)\r\n            setSorted(sumAsc)\r\n            }\r\n            else{\r\n                setSorted1(false)\r\n                setSorted(false)\r\n        }\r\n    }\r\n\r\n    const [sorted1, setSorted1]= React.useState(true)\r\n    function sortDesc(){\r\n        if (notes.length>0){\r\n        setSorted(prevSorted => !prevSorted)\r\n        let sumDesc=notes.sort(function compareFunc(a,b){\r\n            return a.id -b.id\r\n         }\r\n    )\r\n    console.log(sumDesc)\r\n    setSorted1(sumDesc)\r\n        }\r\n        else{\r\n        setSorted(false)\r\n        setSorted1(false)\r\n    }\r\n\r\n}\r\n\r\n\r\nconsole.log(notes)\r\nconsole.log(sorted)\r\nconsole.log(sorted1)\r\nconsole.log(notes.length)\r\n\r\n    return(\r\n    <div className=\"container\">\r\n        <SideTasksCompleted notes={notes} />\r\n        <div className=\"tableContainer\">\r\n            <table cellPadding=\"5rem\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"th-ID\"> <input type=\"checkbox\"checked={isChecked} onChange={(event) => selectAllId (event)}/>\r\n                        ID  \r\n                        {/* {sorted ? <AiOutlineArrowDown onClick={sortDesc} /> : <AiOutlineArrowUp onClick={sortAsc} />} */}\r\n                        {sorted ? <TiArrowSortedDown onClick={sortDesc} />:\"\" }\r\n                        {sorted1? <TiArrowSortedUp onClick={sortAsc} />:\"\" }\r\n                        </th>\r\n                        <th>Title</th>\r\n                        <th>Content</th>\r\n                        <th>Status</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {notes.map((eachNote) => {\r\n                        return(\r\n                    <tr>\r\n                        <td><input type=\"checkbox\"\r\n                        onChange={(event ) => handleCheckBoxChange(event, eachNote.id)}\r\n                        onClick={(event ) => handleChange(event, eachNote.id)}\r\n                        checked={eachNote.isChecked}\r\n                        name=\"isChecked\"\r\n                        />\r\n                        <span className=\"Th-No\">{eachNote.id}</span>\r\n                        </td>\r\n                        <td>{eachNote.addTitle}</td>\r\n                        <td>{eachNote.addText}</td>\r\n                        <td>{eachNote.status}</td>\r\n                        <td><button onClick={editNotes}><AiFillEdit /></button>\r\n                        </td>\r\n                    </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"addBtn\">\r\n                <button className=\"activeAddBtn\" onClick={toggleShown}>{isShown?\"Hide Note\":\"Add Note\"}</button>\r\n             </div>\r\n            <div className=\"alertComp\">\r\n                <div className=\"alertComp1\">\r\n                    {isShown && <SidebarNotesEl\r\n                                close={closeSideBarNotes}\r\n                                handleChange= {handleChange}\r\n                                submitForm={submitForm}\r\n                                addTitle={formData.addTitle}\r\n                                addText={formData.addText}\r\n                                />}\r\n                </div>\r\n                {deleteBtn && <SideDeleteNotes closeNoBtn={handleChangeDeleteBtnNo} openYesBtn={handleChangeDeleteBtnYes} />}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport AddNote from './notesApp/mainNotes'\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n        <AddNote />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}